[DEFAULT]
debug = {{ ceilometer_logging_debug }}

log_dir = /var/log/kolla/ceilometer

transport_url = {{ rpc_transport_url }}

{% if nova_compute_virt_type == 'vmware' %}
hypervisor_inspector = vsphere
{% endif %}

[service_credentials]
auth_url = {{ keystone_internal_url }}
region_name = {{ openstack_region_name }}
password = {{ ceilometer_keystone_password }}
username = {{ ceilometer_keystone_user }}
project_name = service
project_domain_id = {{ default_project_domain_id }}
user_domain_id = {{ default_user_domain_id }}
auth_type = password
interface = internal
cafile = {{ openstack_cacert }}

{% if nova_compute_virt_type == 'vmware' %}
[vmware]
host_ip = {{ vmware_vcenter_host_ip }}
host_username = {{ vmware_vcenter_host_username }}
host_password = {{ vmware_vcenter_host_password }}
insecure = {{ vmware_vcenter_insecure }}
{% if not vmware_vcenter_insecure | bool %}
ca_file = /etc/ceilometer/vmware_ca
{% endif %}
{% endif %}

[oslo_messaging_notifications]
transport_url = {{ notify_transport_url }}

[oslo_messaging_rabbit]
heartbeat_in_pthread = false
{% if om_enable_rabbitmq_tls | bool %}
ssl = true
ssl_ca_file = {{ om_rabbitmq_cacert }}
{% endif %}
{% if om_enable_rabbitmq_high_availability | bool %}
amqp_durable_queues = true
{% endif %}

{% if om_enable_rabbitmq_quorum_queues | bool %}
rabbit_quorum_queue = true
{% endif %}

{% if ceilometer_policy_file is defined %}
[oslo_policy]
policy_file = {{ ceilometer_policy_file }}
{% endif %}

[cache]
enabled = "{{ 'True' if oslo_cache_enabled | bool else 'False' }}"
backend = {{ oslo_cache_backend }}
{% if oslo_cache_backend == 'oslo_cache.redis_sentinel' %}
backend_argument = sentinels:{{ oslo_cache_redis_sentinel_servers }}
backend_argument = service_name:{{ oslo_cache_redis_sentinel_service_name }}
backend_argument = username:default
backend_argument = password:{{ redis_master_password }}
{% if redis_enable_tls | bool %}
backend_argument = ssl:True
backend_argument = ssl_certfile:{{ redis_tls_container_path ~ '/' ~ redis_tls_certfile }}
backend_argument = ssl_keyfile:{{ redis_tls_container_path ~ '/' ~ redis_tls_keyfile }}
backend_argument = ssl_ca_certs:{{ openstack_cacert  if redis_tls_use_openstack_ca | bool else redis_tls_container_path ~ '/' ~ redis_tls_cafile }}
{% endif %}
{% endif %}
{% for argument, value in oslo_cache_additional_backend_arguments.items() %}
backend_argument = {{ argument ~':'~ value}}
{% endfor %}
{% if oslo_cache_memcache_servers | length %}
memcache_servers = {{ oslo_cache_memcache_servers }}
{% endif %}
